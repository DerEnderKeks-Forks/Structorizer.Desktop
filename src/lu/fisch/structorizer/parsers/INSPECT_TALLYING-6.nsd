<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.28-12" preRepeat="until " postFor="to" preReturn="return" postForIn="in" preWhile="while" output="OUTPUT" input="INPUT" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preForIn="foreach" stepFor="step " author="Kay Gürtzig" created="2018-12-14" changedby="Kay Gürtzig" changed="2018-12-16" origin="Structorizer 3.28-12 / COBOLParser: &#34;D:\SW-Produkte\Structorizer\tests\Issue631_COBOL_preprocessor\DemoINSPECT.cob&#34;" licenseName="GPLv3-link" license="GNU General Public License (V 3)&#10;https://www.gnu.org/licenses/gpl.html&#10;http://www.gnu.de/documents/gpl.de.html&#10;" text="&#34;INSPECT_TALLYING(target, counters, modes, items, after, before)&#34;" comment="&#34;This routine simulates an INSPECT TALLYING command of COBOL.&#34;,&#34;Argument target represents the string to be inspected.&#34;,&#34;The argument arrays counters, modes, items, after, before must each contain one element per tallying clause:&#34;,&#34;For the k-th tallying clause the elements are to represent:&#34;,&#34;counters[k] - the (initial) count value (will be incremented by the routine);&#34;,&#34;modes[k] - one of &#34;&#34;CHARACTERS&#34;&#34;, &#34;&#34;ALL&#34;&#34;, &#34;&#34;LEADING&#34;&#34;, &#34;&#34;TRAILING&#34;&#34;;&#34;,&#34;items[k] - the substring to count (ignored with modes[k] = &#34;&#34;CHARACTERS&#34;&#34;);&#34;,&#34;after[k] - the trigger substring starting the region (or &#34;&#34;&#34;&#34; if none);&#34;,&#34;before[k] - the trigger substrng terminating the region (or &#34;&#34;&#34;&#34; if none).&#34;,&#34;Thus, an argument tuple represents a tallying clause like:&#34;,&#34;counters[k] FOR modes[k] items[k] AFTER INITIAL after[k] BEFORE INITIAL before[k]&#34;" color="ffffff" type="sub" style="nice">
	<children>
		<instruction text="&#34;n &#60;- length(items)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;len &#60;- length(target)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
		<for text="&#34;for k &#60;- 0 to n-1&#34;" comment="" counterVar="k" startValue="0" endValue="n-1" stepConst="1" style="COUNTER" color="ffffff" disabled="0">
			<qFor>
				<instruction text="&#34;item &#60;- items[k]&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<instruction text="&#34;lenItem &#60;- length(item)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<instruction text="&#34;start &#60;- pos(after[k], target)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<alternative text="&#34;start &#60; 1&#34;" comment="" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;start &#60;- len + 1&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse>
						<instruction text="&#34;inc(start, length(after[k]))&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
					</qFalse>
				</alternative>
				<instruction text="&#34;end &#60;- pos(before[k], target)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<alternative text="&#34;(before[k] = &#34;&#34;&#34;&#34;) or (end &#60; 1)&#34;" comment="" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;end &#60;- len + 1&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<instruction text="&#34;i &#60;- start&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<case text="&#34;modes[k]&#34;,&#34;&#34;&#34;ALL&#34;&#34;&#34;,&#34;&#34;&#34;LEADING&#34;&#34;&#34;,&#34;&#34;&#34;TRAILING&#34;&#34;&#34;,&#34;&#34;&#34;CHARACTERS&#34;&#34;&#34;,&#34;%&#34;" comment="" color="ffffff" disabled="0">
					<qCase>
						<while text="&#34;i &#60;= end - lenItem&#34;" comment="" color="ffffff" disabled="0">
							<qWhile>
								<instruction text="&#34;p &#60;- pos(item, copy(target, i, end - i))&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<alternative text="&#34;p &#62; 0&#34;" comment="" color="ffffff" disabled="0">
									<qTrue>
										<instruction text="&#34;inc(counters[k], 1)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
										<instruction text="&#34;inc(i, p-1 + lenItem)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
									</qTrue>
									<qFalse>
										<instruction text="&#34;i &#60;- len+1&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
									</qFalse>
								</alternative>
							</qWhile>
						</while>
					</qCase>
					<qCase>
						<while text="&#34;(i &#60;= end - lenItem) and (copy(target, i, lenItem) = item)&#34;" comment="" color="ffffff" disabled="0">
							<qWhile>
								<instruction text="&#34;inc(counters[k], 1)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<instruction text="&#34;inc(i, lenItem)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qWhile>
						</while>
					</qCase>
					<qCase>
						<instruction text="&#34;i &#60;- end - lenItem&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
						<while text="&#34;(i &#62;= start) and (copy(target, i, lenItem) = item)&#34;" comment="" color="ffffff" disabled="0">
							<qWhile>
								<instruction text="&#34;inc(counters[k], 1)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<instruction text="&#34;dec(i, lenItem)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qWhile>
						</while>
					</qCase>
					<qCase>
						<instruction text="&#34;inc(counters[k], end - start)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
					</qCase>
					<qCase color="ffffff">
					</qCase>
				</case>
			</qFor>
		</for>
	</children>
</root>