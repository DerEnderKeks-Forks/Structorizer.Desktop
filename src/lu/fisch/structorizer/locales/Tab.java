/*
    Structorizer
    A little tool which you can use to create Nassi-Schneiderman Diagrams (NSD)

    Copyright (C) 2009  Bob Fisch

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any
    later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package lu.fisch.structorizer.locales;

/******************************************************************************************************
 *
 *      Author:         Bob Fisch
 *
 *      Description:    This class represents a Translator tab (for editing of a locale file section).
 *
 ******************************************************************************************************
 *
 *      Revision List
 *
 *      Author          Date            Description
 *      ------          ----            -----------
 *      Bob Fisch       2016.08.01      First Issue
 *      Kay G端rtzig     2016.08.04      Issue #220: Subsection header rows shouldn't be editable
 *      Kay G端rtzig     2016.08.08      Issue #220: Detect any substantial modification in a cell
 *      Kay G端rtzig     2016.09.06      KGU#244: Opportunity to reload a saved language file to resume editing it
 *                                      Cell renderer shall highlight also deleted texts as modifications
 *      Kay G端rtzig     2017.12.12      Enh. #491: Tooltip for long master texts (otherwise not completely readable)
 *
 ******************************************************************************************************
 *
 *      Comment:		/
 *
 ******************************************************************************************************///

import java.awt.Color;
import java.awt.Component;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * This class represents tabs for the {@link Translator}, the main component is a
 * three-column {@link JTable} showing key sequences in the first column, English
 * master text in the central column, and the locale-bound translation in the third
 * column.
 * @author Robert Fisch
 */
@SuppressWarnings("serial")
public class Tab extends javax.swing.JPanel {

    /**
     * Creates new form Tab
     */
    public Tab() {
        initComponents();
        
        // configure the table
        table.setDefaultRenderer(Object.class, new BoardTableCellRenderer());
        table.setRowHeight(25);
        
        table.setModel(new TranslatorTableModel());
        DefaultTableModel model = ((DefaultTableModel)table.getModel());
        model.setColumnCount(3);
        model.setRowCount(0);
        table.getColumnModel().getColumn(0).setHeaderValue("String");
        
        table.getColumnModel().getColumn(2).setHeaderValue("Please load a language!");
        table.getTableHeader().repaint();
    }
    
    public JTable getTable()
    {
        return table;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}


class BoardTableCellRenderer extends DefaultTableCellRenderer {

    Color backgroundColor = getBackground();

    private static final long serialVersionUID = 1L;

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
        setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
        
        TableModel model = table.getModel();
        String key = (String) model.getValueAt(row, 0);
        
        if (key!=null && key.startsWith(Locale.startOfSubSection))
        {
        	// START KGU 2016-08-04: Issue #220
        	if (model instanceof TranslatorTableModel)
        	{
        		((TranslatorTableModel) model).forbidRowEditable(row);
        	}
        	// END KGU 2016-08-04
            if (!isSelected)
                    c.setBackground(Color.cyan);
            else
                    c.setBackground(Color.blue);
        }
        else if ((value instanceof String && ((String) value).equals("")) || (value==null))
        {
            // START KGU#244 2016-09-06: Show an explicit deletion as well
            boolean isDeleted = col == 2 && Translator.loadedLocale.valueDiffersFrom(key, (String)value);
            // END KGU#244 2016-09-06
        	if (!isSelected)
                //c.setBackground(Color.orange);
        	    c.setBackground(isDeleted ? Color.red : Color.orange);
            else
                c.setBackground(Color.yellow);
        }
        // START KGU#231 2016-08-08: Issue #220 - detect any substantial change
        //else if(col==2 && !Translator.loadedLocale.hasValuePresent(key))
        else if (col==2 && Translator.loadedLocale.valueDiffersFrom(key, (String)value))
        // END KGU#231 2016-08-08
        {
            if(!isSelected)
                c.setBackground(Color.green);
            else
                c.setBackground(Color.green.darker());
        }
        else if (!isSelected) 
        {
            c.setBackground(backgroundColor);
        }
        // START KGU#481 2017-12-12: Enh. #491 - long texts in the central column couldn't read completely
        if (col == 1 && value instanceof String) {
        	int length = c.getPreferredSize().width; 
        	int width = table.getColumnModel().getColumn(1).getWidth();
        	if (length > width) {
        		((JLabel)c).setToolTipText((String)value);
        	}
        	else {
        		((JLabel)c).setToolTipText(null);
        	}
        }
        // END KGU#481 2017-12-12
        return c;
    }
    
}

//@SuppressWarnings("serial")
//class MyRenderer extends DefaultTableCellRenderer {
//
//    Color backgroundColor = getBackground();
//
//    @Override
//    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) 
//    {
//        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//        DefaultTableModel model = (DefaultTableModel) table.getModel();
//        return c;
//    }
//}